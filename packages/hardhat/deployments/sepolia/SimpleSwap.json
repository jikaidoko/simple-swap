{
  "address": "0xd38562084C6bbb6fFe89A9780CB26B86ee66B91B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountAAdded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountBAdded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokensMinted",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountAReceived",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountBReceived",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokensBurned",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8e9d63d8f81a650b052dab956c5ae0b56b67a3403f72e27ae6e9038be0992f9",
  "receipt": {
    "to": null,
    "from": "0x9AefB43D34c855A6Cd6F01Ce2F8DE9597Ea4109b",
    "contractAddress": "0xd38562084C6bbb6fFe89A9780CB26B86ee66B91B",
    "transactionIndex": 152,
    "gasUsed": "1537540",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xbaf5f298d1afa44486f66017b315e81540f45dfb289d5464d7bcf2a9a70a5526",
    "transactionHash": "0xe8e9d63d8f81a650b052dab956c5ae0b56b67a3403f72e27ae6e9038be0992f9",
    "logs": [],
    "blockNumber": 8755229,
    "cumulativeGasUsed": "26497582",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a917879ed4876bbe67319a6b3ba5f4bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokensMinted\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokensBurned\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"LiquidityAdded(address,address,address,uint256,uint256,uint256)\":{\"details\":\"Events to log significant actions in the contract for transparency and tracking.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"details\":\"This function allows users to deposit a pair of tokens (tokenA and tokenB) into the liquidity pool.      The amount of LP tokens minted is calculated based on the square root of the product of desired amounts for the first liquidity provider,      and proportionally to existing reserves for subsequent providers.      It also transfers the tokens from the user to the contract and updates the reserves.\",\"params\":{\"amountADesired\":\"The desired amount of tokenA to add.\",\"amountAMin\":\"The minimum amount of tokenA to add, to prevent unfavorable rates.\",\"amountBDesired\":\"The desired amount of tokenB to add.\",\"amountBMin\":\"The minimum amount of tokenB to add, to prevent unfavorable rates.\",\"deadline\":\"The timestamp by which the transaction must be completed.\",\"to\":\"The address that will receive the LP tokens.\",\"tokenA\":\"The address of the first token in the pair.\",\"tokenB\":\"The address of the second token in the pair.\"},\"returns\":{\"amountA\":\"The actual amount of tokenA added to the pool.\",\"amountB\":\"The actual amount of tokenB added to the pool.\",\"liquidity\":\"The amount of LP tokens minted.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the ERC20 LP token with a name and symbol.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"getAmountOut(uint256,uint256,uint256)\":{\"details\":\"This pure function calculates the output amount based on the constant product formula      ($k = reserveIn \\\\times reserveOut$). The formula used is $(amountIn \\\\times reserveOut) / (reserveIn + amountIn)$.\",\"params\":{\"amountIn\":\"The amount of input tokens.\",\"reserveIn\":\"The current reserve of the input token in the pool.\",\"reserveOut\":\"The current reserve of the output token in the pool.\"},\"returns\":{\"_0\":\"The calculated amount of output tokens.\"}},\"getPrice(address,address)\":{\"details\":\"The price is calculated as the ratio of the reserves, scaled by 1e18.\",\"params\":{\"tokenA\":\"The address of the first token.\",\"tokenB\":\"The address of the second token.\"},\"returns\":{\"price\":\"The price of tokenB in terms of tokenA (tokenB reserve / tokenA reserve * 1e18).\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"details\":\"Users can burn their LP tokens to retrieve a proportional amount of the underlying token reserves.      The amounts of tokens returned are based on the liquidity provided relative to the total LP token supply.\",\"params\":{\"amountAMin\":\"The minimum amount of tokenA to receive, to prevent unfavorable rates.\",\"amountBMin\":\"The minimum amount of tokenB to receive, to prevent unfavorable rates.\",\"deadline\":\"The timestamp by which the transaction must be completed.\",\"liquidity\":\"The amount of LP tokens to burn.\",\"to\":\"The address that will receive the underlying tokens.\",\"tokenA\":\"The address of the first token in the pair.\",\"tokenB\":\"The address of the second token in the pair.\"},\"returns\":{\"amountA\":\"The actual amount of tokenA received.\",\"amountB\":\"The actual amount of tokenB received.\"}},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"details\":\"This function facilitates token swaps based on the current reserves in the pool.      It calculates the output amount based on the constant product formula and      transfers tokens accordingly.\",\"params\":{\"amountIn\":\"The amount of input tokens to swap.\",\"amountOutMin\":\"The minimum amount of output tokens to receive, to prevent unfavorable rates.\",\"deadline\":\"The timestamp by which the transaction must be completed.\",\"path\":\"An array of token addresses, ordered from input to output. For example, `[tokenA, tokenB]`.\",\"to\":\"The address that will receive the output tokens.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"stateVariables\":{\"LPtokenSupply\":{\"details\":\"The total supply of LP (Liquidity Provider) tokens.\"},\"reserveA\":{\"details\":\"The reserve of token A in the liquidity pool.\"},\"reserveB\":{\"details\":\"The reserve of token B in the liquidity pool.\"}},\"title\":\"A simplified decentralized exchange for swapping and providing liquidity.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Adds liquidity to the pool, minting LP tokens to the provider.\"},\"constructor\":{\"notice\":\"Constructor for the SimpleSwap contract.\"},\"getAmountOut(uint256,uint256,uint256)\":{\"notice\":\"Calculates the amount of output tokens received for a given amount of input tokens.\"},\"getPrice(address,address)\":{\"notice\":\"Gets the current price of one token relative to another in the pool.\"},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Removes liquidity from the pool, burning LP tokens and returning underlying tokens.\"},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps an exact amount of input tokens for an amount of output tokens.\"}},\"notice\":\"This contract implements a basic automated market maker (AMM) for two tokens, allowing users to add/remove liquidity and swap tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleSwap.sol\":\"SimpleSwap\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/SimpleSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\n\\r\\n/// @title Interface for SimpleSwap\\r\\ninterface ISimpleSwap {\\r\\n    /// @notice Adds liquidity to the pool, minting LP tokens to the provider.\\r\\n    /// @param tokenA The address of the first token in the pair.\\r\\n    /// @param tokenB The address of the second token in the pair.\\r\\n    /// @param amountADesired The desired amount of tokenA to add.\\r\\n    /// @param amountBDesired The desired amount of tokenB to add.\\r\\n    /// @param amountAMin The minimum amount of tokenA to add, to prevent unfavorable rates.\\r\\n    /// @param amountBMin The minimum amount of tokenB to add, to prevent unfavorable rates.\\r\\n    /// @param to The address that will receive the LP tokens.\\r\\n    /// @param deadline The timestamp by which the transaction must be completed.\\r\\n    /// @return amountA The actual amount of tokenA added to the pool.\\r\\n    /// @return amountB The actual amount of tokenB added to the pool.\\r\\n    /// @return liquidity The amount of LP tokens minted.\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\r\\n\\r\\n    /// @notice Removes liquidity from the pool, burning LP tokens and returning underlying tokens.\\r\\n    /// @param tokenA The address of the first token in the pair.\\r\\n    /// @param tokenB The address of the second token in the pair.\\r\\n    /// @param liquidity The amount of LP tokens to burn.\\r\\n    /// @param amountAMin The minimum amount of tokenA to receive, to prevent unfavorable rates.\\r\\n    /// @param amountBMin The minimum amount of tokenB to receive, to prevent unfavorable rates.\\r\\n    /// @param to The address that will receive the underlying tokens.\\r\\n    /// @param deadline The timestamp by which the transaction must be completed.\\r\\n    /// @return amountA The actual amount of tokenA received.\\r\\n    /// @return amountB The actual amount of tokenB received.\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    /// @notice Swaps an exact amount of input tokens for an amount of output tokens.\\r\\n    /// @param amountIn The amount of input tokens to swap.\\r\\n    /// @param amountOutMin The minimum amount of output tokens to receive, to prevent unfavorable rates.\\r\\n    /// @param path An array of token addresses, ordered from input to output. For example, `[tokenA, tokenB]`.\\r\\n    /// @param to The address that will receive the output tokens.\\r\\n    /// @param deadline The timestamp by which the transaction must be completed.\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Gets the current price of one token relative to another in the pool.\\r\\n    /// @param tokenA The address of the first token.\\r\\n    /// @param tokenB The address of the second token.\\r\\n    /// @return price The price of tokenB in terms of tokenA (tokenB reserve / tokenA reserve * 1e18).\\r\\n    function getPrice(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external view returns (uint256 price);\\r\\n\\r\\n    /// @notice Calculates the amount of output tokens received for a given amount of input tokens.\\r\\n    /// @param amountIn The amount of input tokens.\\r\\n    /// @param reserveIn The current reserve of the input token in the pool.\\r\\n    /// @param reserveOut The current reserve of the output token in the pool.\\r\\n    /// @return The calculated amount of output tokens.\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/// @title A simplified decentralized exchange for swapping and providing liquidity.\\r\\n/// @notice This contract implements a basic automated market maker (AMM) for two tokens, allowing users to add/remove liquidity and swap tokens.\\r\\ncontract SimpleSwap is ERC20, ISimpleSwap {\\r\\n    /// @dev The total supply of LP (Liquidity Provider) tokens.\\r\\n    uint256 LPtokenSupply;\\r\\n    /// @dev The reserve of token A in the liquidity pool.\\r\\n    uint256 public reserveA; // Made public for easier testing\\r\\n    /// @dev The reserve of token B in the liquidity pool.\\r\\n    uint256 public reserveB; // Made public for easier testing\\r\\n    /// @dev Events to log significant actions in the contract for transparency and tracking.\\r\\n    event LiquidityAdded(\\r\\n        address indexed provider,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountAAdded,\\r\\n        uint256 amountBAdded,\\r\\n        uint256 lpTokensMinted\\r\\n    );\\r\\n\\r\\n    event LiquidityRemoved(\\r\\n        address indexed provider,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountAReceived,\\r\\n        uint256 amountBReceived,\\r\\n        uint256 lpTokensBurned\\r\\n    );\\r\\n\\r\\n    event Swap(\\r\\n        address indexed swapper,\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut\\r\\n    );\\r\\n   \\r\\n\\r\\n    /// @notice Constructor for the SimpleSwap contract.\\r\\n    /// @dev Initializes the ERC20 LP token with a name and symbol.\\r\\n    constructor() ERC20(\\\"LP Token\\\", \\\"LPT\\\") {}\\r\\n\\r\\n    /// @notice Adds liquidity to the pool, minting LP tokens to the provider.\\r\\n    /// @dev This function allows users to deposit a pair of tokens (tokenA and tokenB) into the liquidity pool.\\r\\n    ///      The amount of LP tokens minted is calculated based on the square root of the product of desired amounts for the first liquidity provider,\\r\\n    ///      and proportionally to existing reserves for subsequent providers.\\r\\n    ///      It also transfers the tokens from the user to the contract and updates the reserves.\\r\\n    /// @param tokenA The address of the first token in the pair.\\r\\n    /// @param tokenB The address of the second token in the pair.\\r\\n    /// @param amountADesired The desired amount of tokenA to add.\\r\\n    /// @param amountBDesired The desired amount of tokenB to add.\\r\\n    /// @param amountAMin The minimum amount of tokenA to add, to prevent unfavorable rates.\\r\\n    /// @param amountBMin The minimum amount of tokenB to add, to prevent unfavorable rates.\\r\\n    /// @param to The address that will receive the LP tokens.\\r\\n    /// @param deadline The timestamp by which the transaction must be completed.\\r\\n    /// @return amountA The actual amount of tokenA added to the pool.\\r\\n    /// @return amountB The actual amount of tokenB added to the pool.\\r\\n    /// @return liquidity The amount of LP tokens minted.\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity) {\\r\\n        require(amountADesired != 0 && amountBDesired != 0, \\\"Amounts cannot be zero\\\");\\r\\n        require(amountAMin <= amountADesired && amountBMin <= amountBDesired, \\\"Minimum not reached\\\");\\r\\n        require(block.timestamp <= deadline, \\\"Deadline exceeded\\\");\\r\\n\\r\\n        // Token transfer function to provide liquidity to the pool.\\r\\n        // Previous allowance from the provider required\\r\\n        IERC20(tokenA).transferFrom(msg.sender, address(this), amountADesired);\\r\\n        IERC20(tokenB).transferFrom(msg.sender, address(this), amountBDesired);\\r\\n\\r\\n        // For simplicity in this example, assume desired amounts are actual amounts transferred.\\r\\n        amountA = amountADesired;\\r\\n        amountB = amountBDesired;\\r\\n\\r\\n        // Checks-Effects-Interactions Pattern\\r\\n        reserveA += amountA;\\r\\n        reserveB += amountB;\\r\\n\\r\\n        // LP token minting function\\r\\n        if (LPtokenSupply == 0) {\\r\\n            // Uniswap V2 formula suggested for first liquidity provider: sqrt(amountA * amountB)\\r\\n            liquidity = Math.sqrt(amountA * amountB);\\r\\n            // Update the total supply of LP tokens\\r\\n            LPtokenSupply = liquidity;\\r\\n            _mint(to, liquidity);\\r\\n        } else {\\r\\n            if (reserveA == 0 || reserveB == 0) {\\r\\n                revert(\\\"Insufficient reserves for proportional liquidity calculation\\\");\\r\\n            }\\r\\n            uint256 liquidityA = (amountA * LPtokenSupply) / reserveA;\\r\\n            uint256 liquidityB = (amountB * LPtokenSupply) / reserveB;\\r\\n\\r\\n            liquidity = liquidityA < liquidityB ? liquidityA : liquidityB;\\r\\n\\r\\n            require(liquidity > 0, \\\"No LP tokens minted due to imbalance or small amounts\\\");\\r\\n\\r\\n            LPtokenSupply += liquidity;\\r\\n            _mint(to, liquidity);\\r\\n        }\\r\\n\\r\\n        // This event logs the details of the liquidity addition for transparency and tracking.\\r\\n        emit LiquidityAdded(msg.sender, tokenA, tokenB, amountA, amountB, liquidity);\\r\\n        \\r\\n\\r\\n        return (amountA, amountB, liquidity);\\r\\n    }\\r\\n\\r\\n    /// @notice Removes liquidity from the pool, burning LP tokens and returning underlying tokens.\\r\\n    /// @dev Users can burn their LP tokens to retrieve a proportional amount of the underlying token reserves.\\r\\n    ///      The amounts of tokens returned are based on the liquidity provided relative to the total LP token supply.\\r\\n    /// @param tokenA The address of the first token in the pair.\\r\\n    /// @param tokenB The address of the second token in the pair.\\r\\n    /// @param liquidity The amount of LP tokens to burn.\\r\\n    /// @param amountAMin The minimum amount of tokenA to receive, to prevent unfavorable rates.\\r\\n    /// @param amountBMin The minimum amount of tokenB to receive, to prevent unfavorable rates.\\r\\n    /// @param to The address that will receive the underlying tokens.\\r\\n    /// @param deadline The timestamp by which the transaction must be completed.\\r\\n    /// @return amountA The actual amount of tokenA received.\\r\\n    /// @return amountB The actual amount of tokenB received.\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB) {\\r\\n        require(liquidity > 0, \\\"Liquidity should not be zero\\\");\\r\\n        require(block.timestamp <= deadline, \\\"Deadline exceeded\\\");\\r\\n        require(LPtokenSupply > 0, \\\"No liquidity in pool\\\"); // Added check\\r\\n\\r\\n        /* Uniswap V2 formula used to retrieve the proportional\\r\\n         * amount of A tokens and B tokens regarding the LP tokens\\r\\n         * users aim to burn relative to the total LP supply.\\r\\n         * reserveA * (liquidity / LPtokenSupply) &\\r\\n         * reserveB * (liquidity / LPtokenSupply)*/\\r\\n        amountA = (reserveA * liquidity) / LPtokenSupply; // Corrected division order for precision\\r\\n        amountB = (reserveB * liquidity) / LPtokenSupply; // Corrected division order for precision\\r\\n\\r\\n        // Checks-Effects-Interactions Pattern\\r\\n        reserveA -= amountA;\\r\\n        reserveB -= amountB;\\r\\n        LPtokenSupply -= liquidity; // Update LP token supply\\r\\n\\r\\n        //Check the actual amount reaches the minimum desired by user\\r\\n        require(amountA >= amountAMin && amountB >= amountBMin, \\\"Minimal amount not reached\\\");\\r\\n\\r\\n        IERC20(tokenA).transfer(to, amountA); // Transferred to 'to' address\\r\\n        IERC20(tokenB).transfer(to, amountB); // Transferred to 'to' address\\r\\n        _burn(msg.sender, liquidity); // msg.sender burns their LP tokens\\r\\n\\r\\n        // This event logs the details of the liquidity removal for transparency and tracking.\\r\\n        emit LiquidityRemoved(msg.sender, tokenA, tokenB, amountA, amountB, liquidity);\\r\\n        \\r\\n        return (amountA, amountB);\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps an exact amount of input tokens for an amount of output tokens.\\r\\n    /// @dev This function facilitates token swaps based on the current reserves in the pool.\\r\\n    ///      It calculates the output amount based on the constant product formula and\\r\\n    ///      transfers tokens accordingly.\\r\\n    /// @param amountIn The amount of input tokens to swap.\\r\\n    /// @param amountOutMin The minimum amount of output tokens to receive, to prevent unfavorable rates.\\r\\n    /// @param path An array of token addresses, ordered from input to output. For example, `[tokenA, tokenB]`.\\r\\n    /// @param to The address that will receive the output tokens.\\r\\n    /// @param deadline The timestamp by which the transaction must be completed.\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external {\\r\\n        require(path.length == 2, \\\"Path must be two tokens\\\");\\r\\n        require(amountIn > 0, \\\"Amount in must be greater than zero\\\");\\r\\n        require(block.timestamp <= deadline, \\\"Deadline exceeded\\\"); // Changed to <= for consistency\\r\\n\\r\\n        address inputTokenAddress = path[0];\\r\\n        address outputTokenAddress = path[1];\\r\\n\\r\\n        // Get current reserves (balances of tokens held by this swap contract)\\r\\n        uint256 inputReserve = IERC20(inputTokenAddress).balanceOf(address(this));\\r\\n        uint256 outputReserve = IERC20(outputTokenAddress).balanceOf(address(this));\\r\\n\\r\\n        require(inputReserve > 0 && outputReserve > 0, \\\"Insufficient liquidity for swap\\\");\\r\\n\\r\\n        // Calculate amountOut using the constant product formula (x * y = k)\\r\\n        // (reserveOut * amountIn) / (reserveIn + amountIn) is a common simplification\\r\\n        uint256 amountOut = getAmountOut(amountIn, inputReserve, outputReserve);\\r\\n\\r\\n        require(amountOut >= amountOutMin, \\\"Minimal amount not reached\\\");\\r\\n\\r\\n        // Transfer input token from sender to swap contract\\r\\n        IERC20(inputTokenAddress).transferFrom(msg.sender, address(this), amountIn);\\r\\n\\r\\n        // Update internal reserves based on the swap (important for price calculation)\\r\\n        // Note: These are simplified updates. \\r\\n        if (inputTokenAddress == address(aToken)) { // Assuming aToken and bToken are known\\r\\n            reserveA += amountIn;\\r\\n            reserveB -= amountOut;\\r\\n        } else if (inputTokenAddress == address(bToken)) {\\r\\n            reserveB += amountIn;\\r\\n            reserveA -= amountOut;\\r\\n        }\\r\\n        // This if/else if block assumes that tokenA and tokenB are fixed.\\r\\n        // For a generic AMM, you would need a mapping from token address to its reserve.\\r\\n        // For this SimpleSwap, let's assume tokenA is always reserveA and tokenB is always reserveB.\\r\\n\\r\\n        // Transfer output token from swap contract to recipient\\r\\n        IERC20(outputTokenAddress).transfer(to, amountOut);\\r\\n\\r\\n        emit Swap(msg.sender, inputTokenAddress, outputTokenAddress, amountIn, amountOut);\\r\\n        \\r\\n    }\\r\\n\\r\\n    /// @notice Gets the current price of one token relative to another in the pool.\\r\\n    /// @dev The price is calculated as the ratio of the reserves, scaled by 1e18.\\r\\n    /// @param tokenA The address of the first token.\\r\\n    /// @param tokenB The address of the second token.\\r\\n    /// @return price The price of tokenB in terms of tokenA (tokenB reserve / tokenA reserve * 1e18).\\r\\n    function getPrice(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) public view returns (uint256 price) {\\r\\n        // Use internal reserves for price calculation, not external balances\\r\\n        uint256 currentReserveA = (tokenA == address(aToken)) ? reserveA : reserveB;\\r\\n        uint256 currentReserveB = (tokenB == address(bToken)) ? reserveB : reserveA;\\r\\n\\r\\n        require(currentReserveA > 0, \\\"Token A reserve is zero for price calculation\\\");\\r\\n        return (currentReserveB * 1e18) / currentReserveA;\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the amount of output tokens received for a given amount of input tokens.\\r\\n    /// @dev This pure function calculates the output amount based on the constant product formula\\r\\n    ///      ($k = reserveIn \\\\times reserveOut$). The formula used is $(amountIn \\\\times reserveOut) / (reserveIn + amountIn)$.\\r\\n    /// @param amountIn The amount of input tokens.\\r\\n    /// @param reserveIn The current reserve of the input token in the pool.\\r\\n    /// @param reserveOut The current reserve of the output token in the pool.\\r\\n    /// @return The calculated amount of output tokens.\\r\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) public pure returns (uint256) {\\r\\n        require(reserveIn > 0, \\\"Input reserve cannot be zero\\\");\\r\\n        return (amountIn * reserveOut) / (reserveIn + amountIn);\\r\\n    }\\r\\n\\r\\n    address public aToken; // Assuming these are set in a real constructor\\r\\n    address public bToken; // Assuming these are set in a real constructor\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x9e9d54828519618d22074a0c24063ae400bb57a71ae4b40405c3ae3aecd693cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051806040016040528060088152602001672628102a37b5b2b760c11b8152506040518060400160405280600381526020016213141560ea1b81525081600390816200006091906200011d565b5060046200006f82826200011d565b505050620001e9565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000a357607f821691505b602082108103620000c457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200011857600081815260208120601f850160051c81016020861015620000f35750805b601f850160051c820191505b818110156200011457828155600101620000ff565b5050505b505050565b81516001600160401b0381111562000139576200013962000078565b62000151816200014a84546200008e565b84620000ca565b602080601f831160018114620001895760008415620001705750858301515b600019600386901b1c1916600185901b17855562000114565b600085815260208120601f198616915b82811015620001ba5788860151825594840194600190910190840162000199565b5085821015620001d95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6119e780620001f96000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a2578063ac41865a11610071578063ac41865a14610243578063baa2abde14610256578063dc5fa6c51461027e578063dd62ed3e14610287578063e8e33700146102c057600080fd5b806370a08231146101ec57806395d89b4114610215578063a0c1f15e1461021d578063a9059cbb1461023057600080fd5b806318160ddd116100e957806318160ddd146101a457806319e36f3b146101ac57806323b872dd146101b5578063313ce567146101c857806338ed1739146101d757600080fd5b8063054d50d41461011b57806306fdde0314610141578063095ea7b314610156578063180f584214610179575b600080fd5b61012e6101293660046115a6565b6102ee565b6040519081526020015b60405180910390f35b61014961036a565b60405161013891906115d2565b61016961016436600461163c565b6103fc565b6040519015158152602001610138565b60095461018c906001600160a01b031681565b6040516001600160a01b039091168152602001610138565b60025461012e565b61012e60075481565b6101696101c3366004611666565b610416565b60405160128152602001610138565b6101ea6101e53660046116a2565b61043a565b005b61012e6101fa366004611744565b6001600160a01b031660009081526020819052604090205490565b6101496108d5565b60085461018c906001600160a01b031681565b61016961023e36600461163c565b6108e4565b61012e61025136600461175f565b6108f2565b610269610264366004611792565b6109cd565b60408051928352602083019190915201610138565b61012e60065481565b61012e61029536600461175f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102d36102ce3660046117fc565b610cc1565b60408051938452602084019290925290820152606001610138565b60008083116103445760405162461bcd60e51b815260206004820152601c60248201527f496e70757420726573657276652063616e6e6f74206265207a65726f0000000060448201526064015b60405180910390fd5b61034e8484611886565b6103588386611899565b61036291906118c6565b949350505050565b606060038054610379906118e8565b80601f01602080910402602001604051908101604052809291908181526020018280546103a5906118e8565b80156103f25780601f106103c7576101008083540402835291602001916103f2565b820191906000526020600020905b8154815290600101906020018083116103d557829003601f168201915b5050505050905090565b60003361040a8185856110af565b60019150505b92915050565b6000336104248582856110c1565b61042f85858561113f565b506001949350505050565b6002831461048a5760405162461bcd60e51b815260206004820152601760248201527f50617468206d7573742062652074776f20746f6b656e73000000000000000000604482015260640161033b565b600086116104e65760405162461bcd60e51b815260206004820152602360248201527f416d6f756e7420696e206d7573742062652067726561746572207468616e207a60448201526265726f60e81b606482015260840161033b565b804211156105065760405162461bcd60e51b815260040161033b90611922565b60008484600081811061051b5761051b61194d565b90506020020160208101906105309190611744565b90506000858560018181106105475761054761194d565b905060200201602081019061055c9190611744565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156105a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ca9190611963565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106389190611963565b905060008211801561064a5750600081115b6106965760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e74206c697175696469747920666f72207377617000604482015260640161033b565b60006106a38b84846102ee565b9050898110156106f55760405162461bcd60e51b815260206004820152601a60248201527f4d696e696d616c20616d6f756e74206e6f742072656163686564000000000000604482015260640161033b565b6040516323b872dd60e01b8152336004820152306024820152604481018c90526001600160a01b038616906323b872dd906064016020604051808303816000875af1158015610748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076c919061197c565b506008546001600160a01b03908116908616036107b9578a600660008282546107959190611886565b9250508190555080600760008282546107ae919061199e565b909155506108009050565b6009546001600160a01b0390811690861603610800578a600760008282546107e19190611886565b9250508190555080600660008282546107fa919061199e565b90915550505b60405163a9059cbb60e01b81526001600160a01b0388811660048301526024820183905285169063a9059cbb906044016020604051808303816000875af115801561084f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610873919061197c565b50604080516001600160a01b038781168252861660208201529081018c90526060810182905233907fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460629060800160405180910390a25050505050505050505050565b606060048054610379906118e8565b60003361040a81858561113f565b60085460009081906001600160a01b0385811691161461091457600754610918565b6006545b6009549091506000906001600160a01b0385811691161461093b5760065461093f565b6007545b9050600082116109a75760405162461bcd60e51b815260206004820152602d60248201527f546f6b656e20412072657365727665206973207a65726f20666f72207072696360448201526c329031b0b631bab630ba34b7b760991b606482015260840161033b565b816109ba82670de0b6b3a7640000611899565b6109c491906118c6565b95945050505050565b60008060008711610a205760405162461bcd60e51b815260206004820152601c60248201527f4c69717569646974792073686f756c64206e6f74206265207a65726f00000000604482015260640161033b565b82421115610a405760405162461bcd60e51b815260040161033b90611922565b600060055411610a895760405162461bcd60e51b8152602060048201526014602482015273139bc81b1a5c5d5a591a5d1e481a5b881c1bdbdb60621b604482015260640161033b565b60055487600654610a9a9190611899565b610aa491906118c6565b915060055487600754610ab79190611899565b610ac191906118c6565b90508160066000828254610ad5919061199e565b925050819055508060076000828254610aee919061199e565b925050819055508660056000828254610b07919061199e565b9091555050858210801590610b1c5750848110155b610b685760405162461bcd60e51b815260206004820152601a60248201527f4d696e696d616c20616d6f756e74206e6f742072656163686564000000000000604482015260640161033b565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490528a169063a9059cbb906044016020604051808303816000875af1158015610bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdb919061197c565b5060405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905289169063a9059cbb906044016020604051808303816000875af1158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f919061197c565b50610c5a338861119e565b604080516001600160a01b038b811682528a166020820152908101839052606081018290526080810188905233907fd765e08eef31c0983ecca03ecd166297ac485ecd5dd69e291c848f0a020333c19060a00160405180910390a297509795505050505050565b600080808815801590610cd357508715155b610d185760405162461bcd60e51b8152602060048201526016602482015275416d6f756e74732063616e6e6f74206265207a65726f60501b604482015260640161033b565b888711158015610d285750878611155b610d6a5760405162461bcd60e51b8152602060048201526013602482015272135a5b9a5b5d5b481b9bdd081c995858da1959606a1b604482015260640161033b565b83421115610d8a5760405162461bcd60e51b815260040161033b90611922565b6040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b038c16906323b872dd906064016020604051808303816000875af1158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e01919061197c565b506040516323b872dd60e01b8152336004820152306024820152604481018990526001600160a01b038b16906323b872dd906064016020604051808303816000875af1158015610e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e79919061197c565b508892508791508260066000828254610e929190611886565b925050819055508160076000828254610eab9190611886565b9091555050600554600003610ee257610ecc610ec78385611899565b6111d8565b60058190559050610edd85826112c7565b611046565b6006541580610ef15750600754155b15610f645760405162461bcd60e51b815260206004820152603c60248201527f496e73756666696369656e7420726573657276657320666f722070726f706f7260448201527f74696f6e616c206c69717569646974792063616c63756c6174696f6e00000000606482015260840161033b565b600060065460055485610f779190611899565b610f8191906118c6565b9050600060075460055485610f969190611899565b610fa091906118c6565b9050808210610faf5780610fb1565b815b9250600083116110215760405162461bcd60e51b815260206004820152603560248201527f4e6f204c5020746f6b656e73206d696e7465642064756520746f20696d62616c604482015274616e6365206f7220736d616c6c20616d6f756e747360581b606482015260840161033b565b82600560008282546110339190611886565b90915550611043905087846112c7565b50505b604080516001600160a01b038d811682528c166020820152908101849052606081018390526080810182905233907f43c967b388d3a4ccad3f7ab80167852e322e5a3fde9893f530252281b2ae8b709060a00160405180910390a2985098509895505050505050565b6110bc83838360016112fd565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114611139578181101561112a57604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161033b565b611139848484840360006112fd565b50505050565b6001600160a01b03831661116957604051634b637e8f60e11b81526000600482015260240161033b565b6001600160a01b0382166111935760405163ec442f0560e01b81526000600482015260240161033b565b6110bc8383836113d2565b6001600160a01b0382166111c857604051634b637e8f60e11b81526000600482015260240161033b565b6111d4826000836113d2565b5050565b6000816000036111ea57506000919050565b600060016111f7846114fc565b901c6001901b90506001818481611210576112106118b0565b048201901c90506001818481611228576112286118b0565b048201901c90506001818481611240576112406118b0565b048201901c90506001818481611258576112586118b0565b048201901c90506001818481611270576112706118b0565b048201901c90506001818481611288576112886118b0565b048201901c905060018184816112a0576112a06118b0565b048201901c90506112c0818285816112ba576112ba6118b0565b04611590565b9392505050565b6001600160a01b0382166112f15760405163ec442f0560e01b81526000600482015260240161033b565b6111d4600083836113d2565b6001600160a01b0384166113275760405163e602df0560e01b81526000600482015260240161033b565b6001600160a01b03831661135157604051634a1406b160e11b81526000600482015260240161033b565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561113957826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516113c491815260200190565b60405180910390a350505050565b6001600160a01b0383166113fd5780600260008282546113f29190611886565b9091555061146f9050565b6001600160a01b038316600090815260208190526040902054818110156114505760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161033b565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661148b576002805482900390556114aa565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516114ef91815260200190565b60405180910390a3505050565b600080608083901c1561151157608092831c92015b604083901c1561152357604092831c92015b602083901c1561153557602092831c92015b601083901c1561154757601092831c92015b600883901c1561155957600892831c92015b600483901c1561156b57600492831c92015b600283901c1561157d57600292831c92015b600183901c156104105760010192915050565b600081831061159f57816112c0565b5090919050565b6000806000606084860312156115bb57600080fd5b505081359360208301359350604090920135919050565b600060208083528351808285015260005b818110156115ff578581018301518582016040015282016115e3565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461163757600080fd5b919050565b6000806040838503121561164f57600080fd5b61165883611620565b946020939093013593505050565b60008060006060848603121561167b57600080fd5b61168484611620565b925061169260208501611620565b9150604084013590509250925092565b60008060008060008060a087890312156116bb57600080fd5b8635955060208701359450604087013567ffffffffffffffff808211156116e157600080fd5b818901915089601f8301126116f557600080fd5b81358181111561170457600080fd5b8a60208260051b850101111561171957600080fd5b60208301965080955050505061173160608801611620565b9150608087013590509295509295509295565b60006020828403121561175657600080fd5b6112c082611620565b6000806040838503121561177257600080fd5b61177b83611620565b915061178960208401611620565b90509250929050565b600080600080600080600060e0888a0312156117ad57600080fd5b6117b688611620565b96506117c460208901611620565b95506040880135945060608801359350608088013592506117e760a08901611620565b915060c0880135905092959891949750929550565b600080600080600080600080610100898b03121561181957600080fd5b61182289611620565b975061183060208a01611620565b965060408901359550606089013594506080890135935060a0890135925061185a60c08a01611620565b915060e089013590509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b8082018082111561041057610410611870565b808202811582820484141761041057610410611870565b634e487b7160e01b600052601260045260246000fd5b6000826118e357634e487b7160e01b600052601260045260246000fd5b500490565b600181811c908216806118fc57607f821691505b60208210810361191c57634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260119082015270111958591b1a5b9948195e18d959591959607a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561197557600080fd5b5051919050565b60006020828403121561198e57600080fd5b815180151581146112c057600080fd5b818103818111156104105761041061187056fea26469706673582212202dc523e20e1598670a6e0459a8aa931ae484c1e7f206dd27dfd2477bbd0936bc64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a2578063ac41865a11610071578063ac41865a14610243578063baa2abde14610256578063dc5fa6c51461027e578063dd62ed3e14610287578063e8e33700146102c057600080fd5b806370a08231146101ec57806395d89b4114610215578063a0c1f15e1461021d578063a9059cbb1461023057600080fd5b806318160ddd116100e957806318160ddd146101a457806319e36f3b146101ac57806323b872dd146101b5578063313ce567146101c857806338ed1739146101d757600080fd5b8063054d50d41461011b57806306fdde0314610141578063095ea7b314610156578063180f584214610179575b600080fd5b61012e6101293660046115a6565b6102ee565b6040519081526020015b60405180910390f35b61014961036a565b60405161013891906115d2565b61016961016436600461163c565b6103fc565b6040519015158152602001610138565b60095461018c906001600160a01b031681565b6040516001600160a01b039091168152602001610138565b60025461012e565b61012e60075481565b6101696101c3366004611666565b610416565b60405160128152602001610138565b6101ea6101e53660046116a2565b61043a565b005b61012e6101fa366004611744565b6001600160a01b031660009081526020819052604090205490565b6101496108d5565b60085461018c906001600160a01b031681565b61016961023e36600461163c565b6108e4565b61012e61025136600461175f565b6108f2565b610269610264366004611792565b6109cd565b60408051928352602083019190915201610138565b61012e60065481565b61012e61029536600461175f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102d36102ce3660046117fc565b610cc1565b60408051938452602084019290925290820152606001610138565b60008083116103445760405162461bcd60e51b815260206004820152601c60248201527f496e70757420726573657276652063616e6e6f74206265207a65726f0000000060448201526064015b60405180910390fd5b61034e8484611886565b6103588386611899565b61036291906118c6565b949350505050565b606060038054610379906118e8565b80601f01602080910402602001604051908101604052809291908181526020018280546103a5906118e8565b80156103f25780601f106103c7576101008083540402835291602001916103f2565b820191906000526020600020905b8154815290600101906020018083116103d557829003601f168201915b5050505050905090565b60003361040a8185856110af565b60019150505b92915050565b6000336104248582856110c1565b61042f85858561113f565b506001949350505050565b6002831461048a5760405162461bcd60e51b815260206004820152601760248201527f50617468206d7573742062652074776f20746f6b656e73000000000000000000604482015260640161033b565b600086116104e65760405162461bcd60e51b815260206004820152602360248201527f416d6f756e7420696e206d7573742062652067726561746572207468616e207a60448201526265726f60e81b606482015260840161033b565b804211156105065760405162461bcd60e51b815260040161033b90611922565b60008484600081811061051b5761051b61194d565b90506020020160208101906105309190611744565b90506000858560018181106105475761054761194d565b905060200201602081019061055c9190611744565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156105a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ca9190611963565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106389190611963565b905060008211801561064a5750600081115b6106965760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e74206c697175696469747920666f72207377617000604482015260640161033b565b60006106a38b84846102ee565b9050898110156106f55760405162461bcd60e51b815260206004820152601a60248201527f4d696e696d616c20616d6f756e74206e6f742072656163686564000000000000604482015260640161033b565b6040516323b872dd60e01b8152336004820152306024820152604481018c90526001600160a01b038616906323b872dd906064016020604051808303816000875af1158015610748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076c919061197c565b506008546001600160a01b03908116908616036107b9578a600660008282546107959190611886565b9250508190555080600760008282546107ae919061199e565b909155506108009050565b6009546001600160a01b0390811690861603610800578a600760008282546107e19190611886565b9250508190555080600660008282546107fa919061199e565b90915550505b60405163a9059cbb60e01b81526001600160a01b0388811660048301526024820183905285169063a9059cbb906044016020604051808303816000875af115801561084f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610873919061197c565b50604080516001600160a01b038781168252861660208201529081018c90526060810182905233907fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460629060800160405180910390a25050505050505050505050565b606060048054610379906118e8565b60003361040a81858561113f565b60085460009081906001600160a01b0385811691161461091457600754610918565b6006545b6009549091506000906001600160a01b0385811691161461093b5760065461093f565b6007545b9050600082116109a75760405162461bcd60e51b815260206004820152602d60248201527f546f6b656e20412072657365727665206973207a65726f20666f72207072696360448201526c329031b0b631bab630ba34b7b760991b606482015260840161033b565b816109ba82670de0b6b3a7640000611899565b6109c491906118c6565b95945050505050565b60008060008711610a205760405162461bcd60e51b815260206004820152601c60248201527f4c69717569646974792073686f756c64206e6f74206265207a65726f00000000604482015260640161033b565b82421115610a405760405162461bcd60e51b815260040161033b90611922565b600060055411610a895760405162461bcd60e51b8152602060048201526014602482015273139bc81b1a5c5d5a591a5d1e481a5b881c1bdbdb60621b604482015260640161033b565b60055487600654610a9a9190611899565b610aa491906118c6565b915060055487600754610ab79190611899565b610ac191906118c6565b90508160066000828254610ad5919061199e565b925050819055508060076000828254610aee919061199e565b925050819055508660056000828254610b07919061199e565b9091555050858210801590610b1c5750848110155b610b685760405162461bcd60e51b815260206004820152601a60248201527f4d696e696d616c20616d6f756e74206e6f742072656163686564000000000000604482015260640161033b565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490528a169063a9059cbb906044016020604051808303816000875af1158015610bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdb919061197c565b5060405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905289169063a9059cbb906044016020604051808303816000875af1158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f919061197c565b50610c5a338861119e565b604080516001600160a01b038b811682528a166020820152908101839052606081018290526080810188905233907fd765e08eef31c0983ecca03ecd166297ac485ecd5dd69e291c848f0a020333c19060a00160405180910390a297509795505050505050565b600080808815801590610cd357508715155b610d185760405162461bcd60e51b8152602060048201526016602482015275416d6f756e74732063616e6e6f74206265207a65726f60501b604482015260640161033b565b888711158015610d285750878611155b610d6a5760405162461bcd60e51b8152602060048201526013602482015272135a5b9a5b5d5b481b9bdd081c995858da1959606a1b604482015260640161033b565b83421115610d8a5760405162461bcd60e51b815260040161033b90611922565b6040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b038c16906323b872dd906064016020604051808303816000875af1158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e01919061197c565b506040516323b872dd60e01b8152336004820152306024820152604481018990526001600160a01b038b16906323b872dd906064016020604051808303816000875af1158015610e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e79919061197c565b508892508791508260066000828254610e929190611886565b925050819055508160076000828254610eab9190611886565b9091555050600554600003610ee257610ecc610ec78385611899565b6111d8565b60058190559050610edd85826112c7565b611046565b6006541580610ef15750600754155b15610f645760405162461bcd60e51b815260206004820152603c60248201527f496e73756666696369656e7420726573657276657320666f722070726f706f7260448201527f74696f6e616c206c69717569646974792063616c63756c6174696f6e00000000606482015260840161033b565b600060065460055485610f779190611899565b610f8191906118c6565b9050600060075460055485610f969190611899565b610fa091906118c6565b9050808210610faf5780610fb1565b815b9250600083116110215760405162461bcd60e51b815260206004820152603560248201527f4e6f204c5020746f6b656e73206d696e7465642064756520746f20696d62616c604482015274616e6365206f7220736d616c6c20616d6f756e747360581b606482015260840161033b565b82600560008282546110339190611886565b90915550611043905087846112c7565b50505b604080516001600160a01b038d811682528c166020820152908101849052606081018390526080810182905233907f43c967b388d3a4ccad3f7ab80167852e322e5a3fde9893f530252281b2ae8b709060a00160405180910390a2985098509895505050505050565b6110bc83838360016112fd565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114611139578181101561112a57604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161033b565b611139848484840360006112fd565b50505050565b6001600160a01b03831661116957604051634b637e8f60e11b81526000600482015260240161033b565b6001600160a01b0382166111935760405163ec442f0560e01b81526000600482015260240161033b565b6110bc8383836113d2565b6001600160a01b0382166111c857604051634b637e8f60e11b81526000600482015260240161033b565b6111d4826000836113d2565b5050565b6000816000036111ea57506000919050565b600060016111f7846114fc565b901c6001901b90506001818481611210576112106118b0565b048201901c90506001818481611228576112286118b0565b048201901c90506001818481611240576112406118b0565b048201901c90506001818481611258576112586118b0565b048201901c90506001818481611270576112706118b0565b048201901c90506001818481611288576112886118b0565b048201901c905060018184816112a0576112a06118b0565b048201901c90506112c0818285816112ba576112ba6118b0565b04611590565b9392505050565b6001600160a01b0382166112f15760405163ec442f0560e01b81526000600482015260240161033b565b6111d4600083836113d2565b6001600160a01b0384166113275760405163e602df0560e01b81526000600482015260240161033b565b6001600160a01b03831661135157604051634a1406b160e11b81526000600482015260240161033b565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561113957826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516113c491815260200190565b60405180910390a350505050565b6001600160a01b0383166113fd5780600260008282546113f29190611886565b9091555061146f9050565b6001600160a01b038316600090815260208190526040902054818110156114505760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161033b565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661148b576002805482900390556114aa565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516114ef91815260200190565b60405180910390a3505050565b600080608083901c1561151157608092831c92015b604083901c1561152357604092831c92015b602083901c1561153557602092831c92015b601083901c1561154757601092831c92015b600883901c1561155957600892831c92015b600483901c1561156b57600492831c92015b600283901c1561157d57600292831c92015b600183901c156104105760010192915050565b600081831061159f57816112c0565b5090919050565b6000806000606084860312156115bb57600080fd5b505081359360208301359350604090920135919050565b600060208083528351808285015260005b818110156115ff578581018301518582016040015282016115e3565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461163757600080fd5b919050565b6000806040838503121561164f57600080fd5b61165883611620565b946020939093013593505050565b60008060006060848603121561167b57600080fd5b61168484611620565b925061169260208501611620565b9150604084013590509250925092565b60008060008060008060a087890312156116bb57600080fd5b8635955060208701359450604087013567ffffffffffffffff808211156116e157600080fd5b818901915089601f8301126116f557600080fd5b81358181111561170457600080fd5b8a60208260051b850101111561171957600080fd5b60208301965080955050505061173160608801611620565b9150608087013590509295509295509295565b60006020828403121561175657600080fd5b6112c082611620565b6000806040838503121561177257600080fd5b61177b83611620565b915061178960208401611620565b90509250929050565b600080600080600080600060e0888a0312156117ad57600080fd5b6117b688611620565b96506117c460208901611620565b95506040880135945060608801359350608088013592506117e760a08901611620565b915060c0880135905092959891949750929550565b600080600080600080600080610100898b03121561181957600080fd5b61182289611620565b975061183060208a01611620565b965060408901359550606089013594506080890135935060a0890135925061185a60c08a01611620565b915060e089013590509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b8082018082111561041057610410611870565b808202811582820484141761041057610410611870565b634e487b7160e01b600052601260045260246000fd5b6000826118e357634e487b7160e01b600052601260045260246000fd5b500490565b600181811c908216806118fc57607f821691505b60208210810361191c57634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260119082015270111958591b1a5b9948195e18d959591959607a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561197557600080fd5b5051919050565b60006020828403121561198e57600080fd5b815180151581146112c057600080fd5b818103818111156104105761041061187056fea26469706673582212202dc523e20e1598670a6e0459a8aa931ae484c1e7f206dd27dfd2477bbd0936bc64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "LiquidityAdded(address,address,address,uint256,uint256,uint256)": {
        "details": "Events to log significant actions in the contract for transparency and tracking."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "details": "This function allows users to deposit a pair of tokens (tokenA and tokenB) into the liquidity pool.      The amount of LP tokens minted is calculated based on the square root of the product of desired amounts for the first liquidity provider,      and proportionally to existing reserves for subsequent providers.      It also transfers the tokens from the user to the contract and updates the reserves.",
        "params": {
          "amountADesired": "The desired amount of tokenA to add.",
          "amountAMin": "The minimum amount of tokenA to add, to prevent unfavorable rates.",
          "amountBDesired": "The desired amount of tokenB to add.",
          "amountBMin": "The minimum amount of tokenB to add, to prevent unfavorable rates.",
          "deadline": "The timestamp by which the transaction must be completed.",
          "to": "The address that will receive the LP tokens.",
          "tokenA": "The address of the first token in the pair.",
          "tokenB": "The address of the second token in the pair."
        },
        "returns": {
          "amountA": "The actual amount of tokenA added to the pool.",
          "amountB": "The actual amount of tokenB added to the pool.",
          "liquidity": "The amount of LP tokens minted."
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "details": "Initializes the ERC20 LP token with a name and symbol."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "getAmountOut(uint256,uint256,uint256)": {
        "details": "This pure function calculates the output amount based on the constant product formula      ($k = reserveIn \\times reserveOut$). The formula used is $(amountIn \\times reserveOut) / (reserveIn + amountIn)$.",
        "params": {
          "amountIn": "The amount of input tokens.",
          "reserveIn": "The current reserve of the input token in the pool.",
          "reserveOut": "The current reserve of the output token in the pool."
        },
        "returns": {
          "_0": "The calculated amount of output tokens."
        }
      },
      "getPrice(address,address)": {
        "details": "The price is calculated as the ratio of the reserves, scaled by 1e18.",
        "params": {
          "tokenA": "The address of the first token.",
          "tokenB": "The address of the second token."
        },
        "returns": {
          "price": "The price of tokenB in terms of tokenA (tokenB reserve / tokenA reserve * 1e18)."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "details": "Users can burn their LP tokens to retrieve a proportional amount of the underlying token reserves.      The amounts of tokens returned are based on the liquidity provided relative to the total LP token supply.",
        "params": {
          "amountAMin": "The minimum amount of tokenA to receive, to prevent unfavorable rates.",
          "amountBMin": "The minimum amount of tokenB to receive, to prevent unfavorable rates.",
          "deadline": "The timestamp by which the transaction must be completed.",
          "liquidity": "The amount of LP tokens to burn.",
          "to": "The address that will receive the underlying tokens.",
          "tokenA": "The address of the first token in the pair.",
          "tokenB": "The address of the second token in the pair."
        },
        "returns": {
          "amountA": "The actual amount of tokenA received.",
          "amountB": "The actual amount of tokenB received."
        }
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
        "details": "This function facilitates token swaps based on the current reserves in the pool.      It calculates the output amount based on the constant product formula and      transfers tokens accordingly.",
        "params": {
          "amountIn": "The amount of input tokens to swap.",
          "amountOutMin": "The minimum amount of output tokens to receive, to prevent unfavorable rates.",
          "deadline": "The timestamp by which the transaction must be completed.",
          "path": "An array of token addresses, ordered from input to output. For example, `[tokenA, tokenB]`.",
          "to": "The address that will receive the output tokens."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      }
    },
    "stateVariables": {
      "LPtokenSupply": {
        "details": "The total supply of LP (Liquidity Provider) tokens."
      },
      "reserveA": {
        "details": "The reserve of token A in the liquidity pool."
      },
      "reserveB": {
        "details": "The reserve of token B in the liquidity pool."
      }
    },
    "title": "A simplified decentralized exchange for swapping and providing liquidity.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "notice": "Adds liquidity to the pool, minting LP tokens to the provider."
      },
      "constructor": {
        "notice": "Constructor for the SimpleSwap contract."
      },
      "getAmountOut(uint256,uint256,uint256)": {
        "notice": "Calculates the amount of output tokens received for a given amount of input tokens."
      },
      "getPrice(address,address)": {
        "notice": "Gets the current price of one token relative to another in the pool."
      },
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Removes liquidity from the pool, burning LP tokens and returning underlying tokens."
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
        "notice": "Swaps an exact amount of input tokens for an amount of output tokens."
      }
    },
    "notice": "This contract implements a basic automated market maker (AMM) for two tokens, allowing users to add/remove liquidity and swap tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 163,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 169,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 171,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 173,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 175,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1943,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "LPtokenSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1946,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "reserveA",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1949,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "reserveB",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2561,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "aToken",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2563,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "bToken",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}